[33mcommit 2c282f7e500d091603d724c3ddb09e22651637b4[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmain[m[33m)[m
Author: toniyanez <toniyanez72@icloud.com>
Date:   Mon May 5 01:44:17 2025 +0000

    Refactor dashboard layout to enhance user interaction with OpenAI integration for relocation recommendations and chat functionality

[1mdiff --git a/app.py b/app.py[m
[1mindex 2342617..eea1f25 100644[m
[1m--- a/app.py[m
[1m+++ b/app.py[m
[36m@@ -15,7 +15,7 @@[m [mcompetitors_data = pd.read_csv('Data/competitors.csv')[m
 supply_chain_data = pd.read_csv('Data/Competitors_Supply_chain.csv')[m
 [m
 # Initialize the Dash app[m
[31m-app = Dash(__name__)[m
[32m+[m[32mapp = Dash(__name__, suppress_callback_exceptions=True)[m
 [m
 # Layout of the dashboard[m
 app.layout = html.Div([[m
[36m@@ -50,25 +50,16 @@[m [mapp.layout = html.Div([[m
                     'border-right': '1px solid #ccc'[m
                 }),[m
 [m
[31m-                # Central Panel: Revenue by Brand Chart and Product Table[m
[32m+[m[32m                # Central Panel: Revenue by Brand Chart[m
                 html.Div([[m
                     html.H3("Revenue by Brand"),[m
                     dcc.Graph(id='brand-bar-chart'),[m
[31m-                    html.H3("Product Table"),[m
[31m-                    dash_table.DataTable([m
[31m-                        id='product-table',[m
[31m-                        columns=[[m
[31m-                            {"name": "Product", "id": "product"},[m
[31m-                            {"name": "Tariff", "id": "tariff"},[m
[31m-                            {"name": "Country", "id": "country"},[m
[31m-                            {"name": "Comments", "id": "comments"}[m
[31m-                        ],[m
[31m-                        style_table={'overflowX': 'auto'},[m
[31m-                        style_cell={'textAlign': 'left'},[m
[31m-                        filter_action="native",[m
[31m-                        sort_action="native",[m
[31m-                        page_size=10[m
[31m-                    )[m
[32m+[m[32m                    # Add placeholders for the charts in the layout[m
[32m+[m[32m                    html.Div([[m
[32m+[m[32m                        dcc.Graph(id='profit-impact-bar-chart-main'),[m
[32m+[m[32m                        dcc.Graph(id='cogs-pie-chart-main'),[m
[32m+[m[32m                        dcc.Graph(id='profit-margin-line-chart-main')[m
[32m+[m[32m                    ], style={'width': '100%', 'display': 'inline-block'}),[m
                 ], style={[m
                     'width': '50%',[m
                     'display': 'inline-block',[m
[36m@@ -128,8 +119,37 @@[m [mapp.layout = html.Div([[m
 [m
         dcc.Tab(label='Relocation Simulation', children=[[m
             html.Div([[m
[31m-                html.H3("Radar Chart for Country Proposal"),[m
[31m-                dcc.Graph(id='radar-chart')[m
[32m+[m[32m                html.H3("Relocation Simulation"),[m
[32m+[m[32m                html.Label("Select a Brand"),[m
[32m+[m[32m                dcc.Dropdown([m
[32m+[m[32m                    id='relocation-brand-dropdown',[m
[32m+[m[32m                    options=[{'label': brand, 'value': brand} for brand in brand_data['brand_name'].unique()],[m
[32m+[m[32m                    placeholder="Select a Brand",[m
[32m+[m[32m                    style={'margin-bottom': '20px'}[m
[32m+[m[32m                ),[m
[32m+[m[32m                dcc.Graph(id='relocation-radar-chart'),[m
[32m+[m[32m                html.Div(id='relocation-conclusion', style={'margin-top': '20px'}),[m
[32m+[m[32m                html.H3("Chat with OpenAI Agent"),[m
[32m+[m[32m                html.Div([m
[32m+[m[32m                    id='chat-container',[m
[32m+[m[32m                    style={[m
[32m+[m[32m                        'width': '100%',[m
[32m+[m[32m                        'height': '400px',  # Increase the height of the chat box[m
[32m+[m[32m                        'overflow-y': 'scroll',  # Enable vertical scrolling[m
[32m+[m[32m                        'border': '1px solid #ccc',[m
[32m+[m[32m                        'padding': '10px',[m
[32m+[m[32m                        'border-radius': '5px',[m
[32m+[m[32m                        'background-color': '#f9f9f9',[m
[32m+[m[32m                        'whiteSpace': 'pre-line'[m
[32m+[m[32m                    }[m
[32m+[m[32m                ),[m
[32m+[m[32m                dcc.Input([m
[32m+[m[32m                    id='chat-input',[m
[32m+[m[32m                    placeholder="Type your message here and press Enter...",[m
[32m+[m[32m                    style={'width': '100%', 'margin-top': '10px', 'padding': '10px'},[m
[32m+[m[32m                    type='text',[m
[32m+[m[32m                    n_submit=0  # Detect Enter key press[m
[32m+[m[32m                )[m
             ], style={'width': '100%', 'display': 'inline-block', 'margin-top': '20px'})[m
         ])[m
     ])[m
[36m@@ -168,50 +188,6 @@[m [mdef interpret_description_with_openai(brand_name_or_category, description):[m
             })[m
     return structured_data[m
 [m
[31m-# Callback to update the product table based on selected brand[m
[31m-@app.callback([m
[31m-    Output('product-table', 'data'),[m
[31m-    Input('brand-bar-chart', 'clickData')[m
[31m-)[m
[31m-def update_product_table(click_data):[m
[31m-    # Fixed product categories for simplicity[m
[31m-    product_categories = ["Helmets", "Binoculars", "Precision Optics", "Electronic Devices"][m
[31m-[m
[31m-    # Prompt OpenAI to get tariffs for these categories[m
[31m-    prompt = f"""[m
[31m-    You are an expert on trade tariffs. List the tariffs for each of these product categories:[m
[31m-    {', '.join(product_categories)}.[m
[31m-    Provide the response in the format: "Product Category, Tariff Applied".[m
[31m-    """[m
[31m-    response = openai.ChatCompletion.create([m
[31m-        model="gpt-3.5-turbo",[m
[31m-        messages=[[m
[31m-            {"role": "system", "content": "You are an assistant that provides trade tariff information."},[m
[31m-            {"role": "user", "content": prompt}[m
[31m-        ],[m
[31m-        max_tokens=300,[m
[31m-        temperature=0.7[m
[31m-    )[m
[31m-    print("Raw OpenAI Response:", response)  # Log the raw response[m
[31m-[m
[31m-    # Parse the OpenAI response[m
[31m-    results = response['choices'][0]['message']['content'].strip().split("\n")[m
[31m-    product_data = [][m
[31m-    for result in results:[m
[31m-        parts = result.split(",")  # Split by comma[m
[31m-        if len(parts) == 2:[m
[31m-            product_data.append({[m
[31m-                "product": parts[0].strip(),[m
[31m-                "tariff": parts[1].strip(),[m
[31m-                "country": "N/A",  # Placeholder for simplicity[m
[31m-                "comments": "N/A"  # Placeholder for simplicity[m
[31m-            })[m
[31m-[m
[31m-    # Log the parsed data for debugging[m
[31m-    print("Parsed Product Data:", product_data)[m
[31m-[m
[31m-    return product_data[m
[31m-[m
 # Callback to update the brand bar chart and brand details table[m
 @app.callback([m
     [Output('brand-bar-chart', 'figure'),[m
[36m@@ -375,23 +351,31 @@[m [mdef update_openai_tariff_table(selected_business_unit):[m
 [m
 # Callback to simulate competitor tariff impact[m
 @app.callback([m
[31m-    [Output('competitor-profit-impact-bar-chart', 'figure'),[m
[31m-     Output('competitor-cogs-pie-chart', 'figure'),[m
[31m-     Output('competitor-profit-margin-line-chart', 'figure')],[m
[32m+[m[32m    [Output('competitor-profit-impact-bar-chart', 'figure')],[m
     [Input('apply-competitor-scenario-button', 'n_clicks')],[m
     [State('competitor-tariff-increase-input', 'value')][m
 )[m
 def simulate_competitor_tariff_impact(n_clicks, tariff_increase):[m
     if n_clicks > 0 and tariff_increase:[m
[31m-        # Merge competitors data with supply chain data[m
[31m-        competitors = competitors_data.merge(supply_chain_data, on='competitor_name')[m
[32m+[m[32m        # Filter supply chain data for China[m
[32m+[m[32m        china_supply_chain = supply_chain_data[supply_chain_data['competitor_supplier_country'] == 'China'][m
[32m+[m
[32m+[m[32m        # Merge competitors data with filtered supply chain data[m
[32m+[m[32m        competitors = competitors_data.merge([m
[32m+[m[32m            china_supply_chain[['competitor_name', 'Proportion_imports']],[m
[32m+[m[32m            on='competitor_name',[m
[32m+[m[32m            how='left'[m
[32m+[m[32m        )[m
[32m+[m
[32m+[m[32m        # Convert Proportion_imports to numeric and handle non-numeric values[m
[32m+[m[32m        competitors['Proportion_imports'] = pd.to_numeric(competitors['Proportion_imports'], errors='coerce').fillna(0)[m
 [m
         # Calculate baseline profit and COGS[m
         competitors['baseline_profit'] = competitors['revenue_usd'] * 0.5[m
         competitors['baseline_cogs'] = competitors['revenue_usd'] - competitors['baseline_profit'][m
 [m
[31m-        # Calculate tariff costs for China[m
[31m-        competitors['china_tariff_cost'] = competitors['baseline_cogs'] * (competitors['china_share'] / 100) * (tariff_increase / 100)[m
[32m+[m[32m        # Calculate tariff costs for China (existing + scenario tariff)[m
[32m+[m[32m        competitors['china_tariff_cost'] = competitors['baseline_cogs'] * (competitors['Proportion_imports'] / 100) * (tariff_increase / 100)[m
 [m
         # Calculate new COGS and profit[m
         competitors['new_cogs'] = competitors['baseline_cogs'] + competitors['china_tariff_cost'][m
[36m@@ -415,27 +399,233 @@[m [mdef simulate_competitor_tariff_impact(n_clicks, tariff_increase):[m
             labels={'Profit': 'Profit (USD)', 'Scenario': 'Scenario'}[m
         )[m
 [m
[31m-        # Pie Chart: COGS Breakdown[m
[31m-        cogs_pie_chart = px.pie([m
[31m-            values=[competitors['baseline_cogs'].sum(), competitors['china_tariff_cost'].sum()],[m
[31m-            names=['Baseline COGS', 'Increased Tariff Costs'],[m
[31m-            title='COGS Breakdown for Competitors'[m
[32m+[m[32m        return [profit_impact_chart][m
[32m+[m
[32m+[m[32m    return [{}][m
[32m+[m
[32m+[m[32m# Callback to find alternative suppliers[m
[32m+[m[32m@app.callback([m
[32m+[m[32m    Output('radar-chart', 'figure'),[m
[32m+[m[32m    Input('apply-scenario-button', 'n_clicks')[m
[32m+[m[32m)[m
[32m+[m[32mdef find_alternative_suppliers(n_clicks):[m
[32m+[m[32m    if n_clicks > 0:[m
[32m+[m[32m        # Combine product and brand descriptions into a single prompt[m
[32m+[m[32m        products_and_brands = brand_data[['brand_name', 'description']].drop_duplicates()[m
[32m+[m[32m        prompt = "You are an expert in global trade. Suggest alternative suppliers for the following products and brands currently sourced from China:\n"[m
[32m+[m[32m        for _, row in products_and_brands.iterrows():[m
[32m+[m[32m            prompt += f"- {row['brand_name']}: {row['description']}\n"[m
[32m+[m
[32m+[m[32m        # Query OpenAI[m
[32m+[m[32m        response = openai.ChatCompletion.create([m
[32m+[m[32m            model="gpt-3.5-turbo",[m
[32m+[m[32m            messages=[[m
[32m+[m[32m                {"role": "system", "content": "You are an assistant that provides alternative supplier recommendations."},[m
[32m+[m[32m                {"role": "user", "content": prompt}[m
[32m+[m[32m            ],[m
[32m+[m[32m            max_tokens=500,[m
[32m+[m[32m            temperature=0.7[m
         )[m
[32m+[m[32m        print("Raw OpenAI Response:", response)  # Log the raw response[m
 [m
[31m-        # Line Chart: Profit Margin Change[m
[31m-        competitors['baseline_margin'] = (competitors['baseline_profit'] / competitors['revenue_usd']) * 100[m
[31m-        competitors['new_margin'] = (competitors['new_profit'] / competitors['revenue_usd']) * 100[m
[31m-        profit_margin_chart = px.line([m
[31m-            competitors,[m
[31m-            x='competitor_name',[m
[31m-            y=['baseline_margin', 'new_margin'],[m
[31m-            title='Profit Margin Change by Competitor',[m
[31m-            labels={'value': 'Profit Margin (%)', 'variable': 'Scenario'}[m
[32m+[m[32m        # Parse the OpenAI response[m
[32m+[m[32m        results = response['choices'][0]['message']['content'].strip().split("\n")[m
[32m+[m[32m        supplier_data = [][m
[32m+[m[32m        for result in results:[m
[32m+[m[32m            supplier_data.append({"Alternative Supplier": result.strip()})[m
[32m+[m
[32m+[m[32m        # Create a radar chart (or table if preferred)[m
[32m+[m[32m        radar_chart = px.bar([m
[32m+[m[32m            pd.DataFrame(supplier_data),[m
[32m+[m[32m            x="Alternative Supplier",[m
[32m+[m[32m            y=[1] * len(supplier_data),  # Dummy values for visualization[m
[32m+[m[32m            title="Alternative Suppliers for Products and Brands",[m
[32m+[m[32m            labels={"y": "Relevance"}[m
         )[m
 [m
[31m-        return profit_impact_chart, cogs_pie_chart, profit_margin_chart[m
[32m+[m[32m        return radar_chart[m
 [m
[31m-    return {}, {}, {}[m
[32m+[m[32m    return {}[m
[32m+[m
[32m+[m[32m# Callback for relocation recommendations[m
[32m+[m[32m@app.callback([m
[32m+[m[32m    Output('relocation-conclusion', 'children'),[m
[32m+[m[32m    Input('relocation-brand-dropdown', 'value')[m
[32m+[m[32m)[m
[32m+[m[32mdef relocation_recommendations(selected_brand):[m
[32m+[m[32m    if selected_brand:[m
[32m+[m[32m        # Prompt for OpenAI[m
[32m+[m[32m        prompt = f"""[m
[32m+[m[32m        You are an experienced Supply chain manager, working at Revelyst Group (1.2B revenues, 49% dependency on China suppliers).[m
[32m+[m[32m        For the brand "{selected_brand}", analyze relocation alternatives for the following product categories:[m
[32m+[m[32m        {', '.join(brand_data[brand_data['brand_name'] == selected_brand]['description'].tolist())}.[m
[32m+[m[32m        Use the following criteria:[m
[32m+[m[32m        - Supplier Complexity Fit[m
[32m+[m[32m        - Key Components & Skills[m
[32m+[m[32m        - Country Location & Logistics[m
[32m+[m[32m        - Operating & Labor Costs[m
[32m+[m[32m        - Transport Costs & Time[m
[32m+[m[32m        - Tariffs & Trade Agreements with USA[m
[32m+[m[32m        - Time to Move & Investments[m
[32m+[m[32m        Provide a table with scores (1-5) for each criterion and for each proposed country, and a conclusion on the best relocation option.[m
[32m+[m[32m        Output format: "Country,Criteria1:Score1,Criteria2:Score2,..."[m
[32m+[m[32m        """[m
[32m+[m
[32m+[m[32m        # Query OpenAI[m
[32m+[m[32m        response = openai.ChatCompletion.create([m
[32m+[m[32m            model="gpt-3.5-turbo",[m
[32m+[m[32m            messages=[[m
[32m+[m[32m                {"role": "system", "content": "You are an assistant that provides supply chain relocation recommendations."},[m
[32m+[m[32m                {"role": "user", "content": prompt}[m
[32m+[m[32m            ],[m
[32m+[m[32m            max_tokens=1000,[m
[32m+[m[32m            temperature=0.7[m
[32m+[m[32m        )[m
[32m+[m[32m        print("Raw OpenAI Response:", response)  # Debugging[m
[32m+[m
[32m+[m[32m        # Parse the OpenAI response[m
[32m+[m[32m        results = response['choices'][0]['message']['content'].strip().split("\n")[m
[32m+[m[32m        country_scores = [][m
[32m+[m[32m        conclusion = [][m
[32m+[m
[32m+[m[32m        for result in results:[m
[32m+[m[32m            if result.startswith("Conclusion:"):[m
[32m+[m[32m                conclusion.append(result)[m
[32m+[m[32m            else:[m
[32m+[m[32m                parts = result.split(",")[m
[32m+[m[32m                if len(parts) > 1:[m
[32m+[m[32m                    country = parts[0].strip()[m
[32m+[m[32m                    criteria_scores = {}[m
[32m+[m[32m                    for p in parts[1:]:[m
[32m+[m[32m                        if ":" in p:  # Ensure the part contains a colon[m
[32m+[m[32m                            key, value = p.split(":", 1)  # Split only on the first colon[m
[32m+[m[32m                            try:[m
[32m+[m[32m                                criteria_scores[key.strip()] = int(value.strip())[m
[32m+[m[32m                            except ValueError:[m
[32m+[m[32m                                print(f"Invalid score for {key.strip()}: {value.strip()}")  # Debugging[m
[32m+[m[32m                                continue  # Skip invalid entries[m
[32m+[m[32m                    if criteria_scores:  # Only add if criteria_scores is not empty[m
[32m+[m[32m                        total_score = sum(criteria_scores.values())[m
[32m+[m[32m                        country_scores.append({[m
[32m+[m[32m                            "Country": country,[m
[32m+[m[32m                            "Criteria Scores": criteria_scores,[m
[32m+[m[32m                            "Total Score": total_score[m
[32m+[m[32m                        })[m
[32m+[m
[32m+[m[32m        # Ensure the data is created correctly[m
[32m+[m[32m        if not country_scores:[m
[32m+[m[32m            return html.Div("No relocation recommendations available for the selected brand.")[m
[32m+[m
[32m+[m[32m        # Sort countries by total score and assign rankings[m
[32m+[m[32m        country_scores = sorted(country_scores, key=lambda x: x["Total Score"], reverse=True)[m
[32m+[m[32m        for i, country_data in enumerate(country_scores):[m
[32m+[m[32m            country_data["Rank"] = i + 1[m
[32m+[m
[32m+[m[32m        # Create cards for each country[m
[32m+[m[32m        cards = [][m
[32m+[m[32m        for country_data in country_scores:[m
[32m+[m[32m            country = country_data["Country"][m
[32m+[m[32m            criteria_scores = country_data["Criteria Scores"][m
[32m+[m[32m            rank = country_data["Rank"][m
[32m+[m
[32m+[m[32m            # Create a radar chart for the criteria scores[m
[32m+[m[32m            radar_chart = px.line_polar([m
[32m+[m[32m                pd.DataFrame({[m
[32m+[m[32m                    "Criteria": list(criteria_scores.keys()),[m
[32m+[m[32m                    "Score": list(criteria_scores.values())[m
[32m+[m[32m                }),[m
[32m+[m[32m                r="Score",[m
[32m+[m[32m                theta="Criteria",[m
[32m+[m[32m                line_close=True[m
[32m+[m[32m            )[m
[32m+[m
[32m+[m[32m            # Create a card for the country[m
[32m+[m[32m            card = html.Div([[m
[32m+[m[32m                html.H4(f"{rank}. {country}", style={'text-align': 'center'}),[m
[32m+[m[32m                dcc.Graph(figure=radar_chart, config={'displayModeBar': False}, style={'height': '300px'}),[m
[32m+[m[32m                html.Div([html.P(f"{key}: {value}") for key, value in criteria_scores.items()], style={'padding': '10px'})[m
[32m+[m[32m            ], style={[m
[32m+[m[32m                'border': '1px solid #ccc',[m
[32m+[m[32m                'border-radius': '5px',[m
[32m+[m[32m                'padding': '10px',[m
[32m+[m[32m                'margin': '10px',[m
[32m+[m[32m                'width': '350px',[m
[32m+[m[32m                'display': 'inline-block',[m
[32m+[m[32m                'vertical-align': 'top',[m
[32m+[m[32m                'box-shadow': '2px 2px 5px rgba(0,0,0,0.1)'[m
[32m+[m[32m            })[m
[32m+[m[32m            cards.append(card)[m
[32m+[m
[32m+[m[32m        # Create conclusion section[m
[32m+[m[32m        conclusion_text = html.Div([[m
[32m+[m[32m            html.H4("Conclusion"),[m
[32m+[m[32m            html.P(" ".join(conclusion))[m
[32m+[m[32m        ], style={'margin-top': '20px'})[m
[32m+[m
[32m+[m[32m        return html.Div(cards + [conclusion_text], style={'display': 'flex', 'flex-wrap': 'wrap'})[m
[32m+[m
[32m+[m[32m    return html.Div("Select a brand to view relocation recommendations.")[m
[32m+[m
[32m+[m[32m# Store conversation history[m
[32m+[m[32mconversation_history = [][m
[32m+[m
[32m+[m[32m@app.callback([m
[32m+[m[32m    Output('chat-container', 'children'),[m
[32m+[m[32m    [Input('chat-input', 'n_submit')],[m
[32m+[m[32m    [State('chat-input', 'value')][m
[32m+[m[32m)[m
[32m+[m[32mdef chat_with_openai(n_submit, user_message):[m
[32m+[m[32m    global conversation_history[m
[32m+[m[32m    if n_submit and user_message:[m
[32m+[m[32m        # Add user message to conversation history[m
[32m+[m[32m        conversation_history.append({'role': 'user', 'content': user_message})[m
[32m+[m
[32m+[m[32m        # Query OpenAI[m
[32m+[m[32m        response = openai.ChatCompletion.create([m
[32m+[m[32m            model="gpt-3.5-turbo",[m
[32m+[m[32m            messages=[[m
[32m+[m[32m                {"role": "system", "content": "You are an assistant that provides supply chain relocation recommendations."}[m
[32m+[m[32m            ] + conversation_history,[m
[32m+[m[32m            max_tokens=500,[m
[32m+[m[32m            temperature=0.7[m
[32m+[m[32m        )[m
[32m+[m[32m        print("Raw OpenAI Response:", response)  # Debugging[m
[32m+[m
[32m+[m[32m        # Extract the response content[m
[32m+[m[32m        reply = response['choices'][0]['message']['content'].strip()[m
[32m+[m[32m        conversation_history.append({'role': 'assistant', 'content': reply})[m
[32m+[m
[32m+[m[32m        # Format the conversation for display[m
[32m+[m[32m        chat_display = [][m
[32m+[m[32m        for message in conversation_history:[m
[32m+[m[32m            if message['role'] == 'user':[m
[32m+[m[32m                chat_display.append(html.Div([m
[32m+[m[32m                    message['content'],[m
[32m+[m[32m                    style={[m
[32m+[m[32m                        'text-align': 'left',[m
[32m+[m[32m                        'margin': '10px',[m
[32m+[m[32m                        'padding': '10px',[m
[32m+[m[32m                        'background-color': '#e6f7ff',[m
[32m+[m[32m                        'border-radius': '5px',[m
[32m+[m[32m                        'max-width': '70%'[m
[32m+[m[32m                    }[m
[32m+[m[32m                ))[m
[32m+[m[32m            elif message['role'] == 'assistant':[m
[32m+[m[32m                chat_display.append(html.Div([m
[32m+[m[32m                    message['content'],[m
[32m+[m[32m                    style={[m
[32m+[m[32m                        'text-align': 'left',[m
[32m+[m[32m                        'margin': '10px',[m
[32m+[m[32m                        'padding': '10px',[m
[32m+[m[32m                        'background-color': '#d9f7be',[m
[32m+[m[32m                        'border-radius': '5px',[m
[32m+[m[32m                        'max-width': '70%'[m
[32m+[m[32m                    }[m
[32m+[m[32m                ))[m
[32m+[m
[32m+[m[32m        return chat_display[m
[32m+[m
[32m+[m[32m    return [][m
 [m
 # Run the app[m
 if __name__ == '__main__':[m
